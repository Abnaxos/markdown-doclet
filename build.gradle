/*
 * Copyright 2014 Raffael Herzog
 *
 * This file is part of pegdown-doclet.
 *
 * pegdown-doclet is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * pegdown-doclet is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with pegdown-doclet.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin:'wrapper'

wrapper {
    gradleVersion = '2.4'
}

allprojects {
    group = 'ch.raffael.pegdown-doclet'
    buildDir = 'target'
    version = '1.3-SNAPSHOT'
}

subprojects {

    apply plugin:'java'
    apply plugin:'groovy'
    apply plugin:'idea'

    repositories {
        mavenLocal()
        jcenter()
    }

    configurations {
        provided
    }

    sourceSets {
        main {
            compileClasspath += configurations.provided
        }
        test {
            compileClasspath += configurations.provided
        }
    }

    tasks.test {
        classpath += configurations.provided
    }

    dependencies {
        testCompile group:'org.codehaus.groovy', name:'groovy-all', version:'2.3.4'
        testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
            exclude group:'org.codehaus.groovy'
        }
        testCompile group:'cglib', name:'cglib-nodep', version:'3.1'
    }

    ext {
        docletProject = project(':doclet')
    }
    project.ext.jdkTools = files("${System.properties['java.home']}/../lib/tools.jar")

    sourceCompatibility = '1.7'
    if ( !project == rootProject ) {
        archivesBaseName += "-${project.name}"
    }

    processResources {
        //noinspection UnnecessaryQualifiedReference
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                "pegdown-doclet-version": project(':doclet').version
        ]
    }

    javadoc.dependsOn classes
    afterEvaluate {
        javadoc {
            classpath += configurations.provided
            options {
                docletpath = (sourceSets.main.output + sourceSets.main.compileClasspath) as List
                doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
                def overviewFile = file('src/main/javadoc/overview.md')
                if ( overviewFile.exists() ) {
                    file('src/main/javadoc/overview.md')
                }
                linkSource = true
                links = [
                        'http://docs.oracle.com/javase/7/docs/api/',
                        'http://docs.oracle.com/javase/7/docs/jdk/api/javadoc/doclet',
                        'http://www.decodified.com/pegdown/api'
                ]
                addStringOption 'javadocversion', 'v7'
                footer = """
              <a href="https://github.com/Abnaxos/pegdown-doclet/" target="_top">
                <img style="position: absolute; top: 0; right: 0; border: 0;" src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png" alt="Fork me on GitHub">
              </a>
              """
            }
        }
    }
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives javadocJar, sourceJar
    }

    idea.module {
        scopes.PROVIDED.plus += [project.configurations.provided]
        scopes.RUNTIME.plus += [configurations.detachedConfiguration(dependencies.create(files(sourceSets.main.output.resourcesDir)))]
        scopes.TEST.plus += [configurations.detachedConfiguration(dependencies.create(files(sourceSets.test.output.resourcesDir)))]
        inheritOutputDirs = false
    }
}
